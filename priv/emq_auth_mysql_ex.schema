%%-*- mode: erlang -*-
%% emq_auth_mysql_ex config mapping
{mapping, "auth.mysqlex.server", "emq_auth_mysql_ex.server", [
  {default, {"127.0.0.1", 3306}},
  {datatype, [integer, ip, string]}
]}.

{mapping, "auth.mysqlex.pool", "emq_auth_mysql_ex.server", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "auth.mysqlex.username", "emq_auth_mysql_ex.server", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "auth.mysqlex.password", "emq_auth_mysql_ex.server", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "auth.mysqlex.database", "emq_auth_mysql_ex.server", [
  {default, "mqtt"},
  {datatype, string}
]}.

{translation, "emq_auth_mysql_ex.server", fun(Conf) ->
  {MyHost, MyPort} =
  case cuttlefish:conf_get("auth.mysqlex.server", Conf) of
    {Ip, Port} -> {Ip, Port};
    S          -> case string:tokens(S, ":") of
                    [Domain]       -> {Domain, 3306};
                    [Domain, Port] -> {Domain, list_to_integer(Port)}
                  end
    end,
  Pool = cuttlefish:conf_get("auth.mysqlex.pool", Conf),
  Username = cuttlefish:conf_get("auth.mysqlex.username", Conf),
  Passwd = cuttlefish:conf_get("auth.mysqlex.password", Conf),
  DB = cuttlefish:conf_get("auth.mysqlex.database", Conf),
  [{pool_size, Pool},
   {auto_reconnect, 1},
   {host, MyHost},
   {port, MyPort},
   {user, Username},
   {password, Passwd},
   {database, DB},
   {encoding, utf8},
   {keep_alive, true}]
end}.

{mapping, "auth.mysqlex.auth_query", "emq_auth_mysql_ex.auth_query", [
  {datatype, string}
]}.

{mapping, "auth.mysqlex.password_hash", "emq_auth_mysql_ex.password_hash", [
  {datatype, string}
]}.

{mapping, "auth.mysqlex.super_query", "emq_auth_mysql_ex.super_query", [
  {datatype, string}
]}.

{mapping, "auth.mysqlex.acl_query", "emq_auth_mysql_ex.acl_query", [
  {datatype, string}
]}.

{translation, "emq_auth_mysql_ex.password_hash", fun(Conf) ->
  HashValue = cuttlefish:conf_get("auth.mysqlex.password_hash", Conf),
    case string:tokens(HashValue, ",") of
        [Hash]           -> list_to_atom(Hash);
        [Prefix, Suffix] -> {list_to_atom(Prefix), list_to_atom(Suffix)};
        [Hash, MacFun, Iterations, Dklen] -> {list_to_atom(Hash), list_to_atom(MacFun), list_to_integer(Iterations), list_to_integer(Dklen)};
        _                -> plain
    end
end}.
